# This function creates a NixOS system based on a setup for a particular architecture.
{ nixpkgs, inputs }:

name:
{ system ? "x86_64-linux"
, user
, config ? { }
}:

let
  # The config files for this system.
  systemConfig = ../hardware/${name}/configuration.nix;
  userConfig = ../users/${user}/nixos.nix;
  userHMConfig = ../users/${user}/home-manager.nix;

  # Home manager reference
  home-manager = inputs.home-manager.nixosModules.home-manager;
in
nixpkgs.lib.nixosSystem
{
  inherit system;

  modules = [
    # Allow unfree packages.
    { nixpkgs.config.allowUnfree = true; }
    systemConfig # Load the autogenerated system configuration
    ../nixos/configuration.nix # Load the main system configuration
    userConfig # User-specific configuration

    # Enable home-manager for managing user configurations
    home-manager
    {
      home-manager.backupFileExtension = "hm-backup";
      home-manager.useGlobalPkgs = true;
      home-manager.useUserPackages = true;
      home-manager.extraSpecialArgs = {
        pkgs-unstable = inputs.nixpkgs-unstable.legacyPackages.${system}; # Pass the unstable packages to home-manager arguments
      };
      home-manager.users.${user} = import userHMConfig {
        inputs = inputs;
      };
    }

    # Forward configuration options to global configuration
    {
      config = config;
    }

    # We expose some extra arguments so that our modules can parameterize
    # better based on these values.
    {
      config._module.args = {
        inputs = inputs;
      };
    }
  ];
}
