# This function creates a NixOS system based on a setup for a particular architecture.
{ nixpkgs, nixpkgs-unstable, inputs }:

name:
{ system ? "x86_64-linux"
, user
, config ? { }
}:

let
  # Pkgs
  commonArgs = { inherit system; config.allowUnfree = true; };
  pkgs = import nixpkgs commonArgs;
  pkgs-unstable = import nixpkgs-unstable commonArgs;

  # The config files for this system.
  userConfig = ../users/${user}/nixos.nix;
  userHMConfig = ../users/${user}/home-manager.nix;
  systemConfig = ../hardware/${name}/configuration.nix;

  # Home manager reference
  home-manager = inputs.home-manager.nixosModules.home-manager;
in
nixpkgs.lib.nixosSystem
{
  # Better way to pass the pkgs and inputs to the modules and system (see https://discourse.nixos.org/t/how-to-allow-unfree-for-unstable-packages/43600/5)
  inherit pkgs;

  modules = [
    systemConfig # Load the autogenerated system configuration
    ../nixos/configuration.nix # Load the main system configuration
    userConfig # User-specific configuration

    # Enable home-manager for managing user configurations
    home-manager
    {
      home-manager.backupFileExtension = "hm-backup";
      home-manager.useGlobalPkgs = true;
      home-manager.useUserPackages = true;
      home-manager.extraSpecialArgs = {
        inherit pkgs-unstable; # Pass the unstable packages to home-manager arguments
      };
      home-manager.users.${user} = import userHMConfig {
        inputs = inputs;
      };
    }

    # Forward configuration options to global configuration
    {
      config = config;
    }

    # We expose some extra arguments so that our modules can parameterize
    # better based on these values.
    {
      config._module.args = {
        inherit inputs pkgs-unstable;
      };
    }
  ];
}
